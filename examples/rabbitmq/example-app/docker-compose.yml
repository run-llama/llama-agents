version: "3"
services:
  message_queue:
    image: rabbitmq:3.13-management
    hostname: "rabbitmq"
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq/data/:/var/lib/rabbitmq/
      - rabbitmq/log/:/var/log/rabbitmq
  control_plane:
    image: multi_agent_app:latest
    command: uvicorn multi_agent_app.core_services.control_plane:app --host 0.0.0.0 --port 8001 --log-config ./logging.ini --log-level debug --reload
    env_file:
      - ./multi-agent-app/.env.docker
    ports:
      - "8001:8001"
    volumes:
      - ./multi-agent-app/multi_agent_app:/app/multi_agent_app # load local code change to container without the need of rebuild
      - ./logging.ini:/app/logging.ini
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./multi-agent-app/Dockerfile
    healthcheck:
      test: wget --no-verbose --tries=1 http://0.0.0.0:8001/ || exit 1
      interval: 30s
      retries: 5
      start_period: 20s
      timeout: 10s
  secret_agent:
    image: multi_agent_app:latest
    command: uvicorn multi_agent_app.agent_services.secret_agent:app --host 0.0.0.0 --port 8002 --log-config ./logging.ini --log-level debug --reload --loop asyncio
    env_file:
      - ./multi-agent-app/.env.docker
    ports:
      - "8002:8002"
    volumes:
      - ./multi-agent-app/multi_agent_app:/app/multi_agent_app # load local code change to container without the need of rebuild
      - ./logging.ini:/app/logging.ini
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./multi-agent-app/Dockerfile
    healthcheck:
      test: wget --no-verbose --tries=1 http://0.0.0.0:8002/ || exit 1
      interval: 30s
      retries: 5
      start_period: 20s
      timeout: 10s
  funny_agent:
    image: multi_agent_app:latest
    command: uvicorn multi_agent_app.agent_services.funny_agent:app --host 0.0.0.0 --port 8003 --log-config ./logging.ini --log-level debug --reload --loop asyncio
    env_file:
      - ./multi-agent-app/.env.docker
    ports:
      - "8003:8003"
    volumes:
      - ./multi-agent-app/multi_agent_app:/app/multi_agent_app # load local code change to container without the need of rebuild
      - ./logging.ini:/app/logging.ini
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./multi-agent-app/Dockerfile
    healthcheck:
      test: wget --no-verbose --tries=1 http://0.0.0.0:8003/ || exit 1
      interval: 30s
      retries: 5
      start_period: 20s
      timeout: 10s
  human_consumer:
    image: multi_agent_app:latest
    command: uvicorn multi_agent_app.additional_services.human_consumer:app --host 0.0.0.0 --port 8004 --log-config ./logging.ini --log-level debug --reload --loop asyncio
    env_file:
      - ./multi-agent-app/.env.docker
    ports:
      - "8004:8004"
    volumes:
      - ./multi-agent-app/multi_agent_app:/app/multi_agent_app # load local code change to container without the need of rebuild
      - ./logging.ini:/app/logging.ini
      - ./task_results:/app/task_results
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./multi-agent-app/Dockerfile
    healthcheck:
      test: wget --no-verbose --tries=1 http://0.0.0.0:8004/ || exit 1
      interval: 30s
      retries: 5
      start_period: 20s
      timeout: 10s
  registration_task:
    image: multi_agent_app:latest
    command: >
      sh -c "python -m multi_agent_app.core_services.control_plane &&
             python -m multi_agent_app.agent_services.secret_agent &&
             python -m multi_agent_app.agent_services.funny_agent &&
             python -m multi_agent_app.additional_services.human_consumer"
    env_file:
      - ./multi-agent-app/.env.docker
    volumes:
      - ./multi-agent-app/multi_agent_app:/app/multi_agent_app
    depends_on:
      message_queue:
        condition: service_healthy
      control_plane:
        condition: service_healthy
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./multi-agent-app/Dockerfile
